//#include "driverlib.h"
//#include <stdio.h>
//
////set the dco frequency to 3MHz
//uint32_t dcoFreq = 3E+6;
//
////strangely, the period chosen seems to change the value
//const int timer1_period = 46875; // 3E+6/64 = 46875 Hz --> read once every second if you count to this number
//
//const float tempgain = .0162293; //(float)5/3/1000;
//
//volatile float voltage;                                // Calculated temperature
//volatile float temp;
//int i = 0;
//
//const Timer_A_UpModeConfig upConfig_0 =                     // Up Mode
//        { TIMER_A_CLOCKSOURCE_SMCLK,                // Timer A is based on SMCLK
//          TIMER_A_CLOCKSOURCE_DIVIDER_64, // Slow down the counter 64 times over
//          timer1_period,                 // Period of Timer A, stored in TAxCCR0
//          TIMER_A_TAIE_INTERRUPT_DISABLE, // Disable interrupts when Timer A rolls over
//          TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE, // Enable interrupt for capture-compare
//          TIMER_A_DO_CLEAR                   // Clears counter when initialized
//        };
//
//void main(void)
//{
////    //Halt Watchdog Timer
////    WDT_A_holdTimer();
////
////    //enable floating point module
////    MAP_FPU_enableModule();
////
////    // Set DCO clock source frequency
////    CS_setDCOFrequency(dcoFreq);
////    // Set Submaster Clock to be 1-1 with DCO.  The larger the divider, the slower the clock signal will be
////    CS_initClockSignal(CS_SMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1);
////
////    //Set pin to read ADC
////    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P5, GPIO_PIN5,
////    GPIO_TERTIARY_MODULE_FUNCTION);
////
////    //enable ADC
////    ADC14_enableModule();
////
////    //set ADC Resolution to 10 bit
////    ADC14_setResolution(ADC_10BIT);
////
////    //this is using the masterclock to sample the ADC module (so it's running at 3MHz)
////    ADC14_initModule(ADC_CLOCKSOURCE_MCLK, ADC_PREDIVIDER_1, ADC_DIVIDER_1,
////    ADC_NOROUTE);
////
////    ADC14_configureSingleSampleMode(ADC_MEM0, false);
////
////    MAP_REF_A_setReferenceVoltage(REF_A_VREF2_5V);
////    MAP_REF_A_enableReferenceVoltage();
////
////    //conversion memory to intbuf
////    ADC14_configureConversionMemory(ADC_MEM0, ADC_VREFPOS_INTBUF_VREFNEG_VSS,
////    ADC_INPUT_A0,
////                                    ADC_NONDIFFERENTIAL_INPUTS);
////
////    ADC14_enableSampleTimer(ADC_MANUAL_ITERATION);
////
////    //Enable the ADC
////    ADC14_enableConversion();
////
////    Interrupt_disableMaster();
////    //interrupt not when the ADC is complete, but when 1 second has passed and timer A is finished
////    Timer_A_clearInterruptFlag(TIMER_A0_BASE);
////    //Enable and configure the interrupt for up mode
////    Timer_A_enableInterrupt(TIMER_A0_BASE);
////    Timer_A_configureUpMode(TIMER_A0_BASE, &upConfig_0);
////    Interrupt_enableInterrupt(INT_TA0_0);
////
////    //wasn't in the notes.  Starts the counter.  Counts in up mode to the equivalent time for 1 second
////    Timer_A_startCounter(TIMER_A0_BASE, TIMER_A_UP_MODE);
////    Interrupt_enableMaster();
////
////    //UART configuration for 38400 baud rate
////    const eUSCI_UART_Config uartConfig = {
////    EUSCI_A_UART_CLOCKSOURCE_SMCLK, // SMCLK Clock Source
////            4, // Calculated using 3MHz and 38400bps
////            14, 0,
////            EUSCI_A_UART_NO_PARITY, // No Parity
////            EUSCI_A_UART_LSB_FIRST, // LSB First
////            EUSCI_A_UART_ONE_STOP_BIT, // One stop bit
////            EUSCI_A_UART_MODE, // UART mode
////            EUSCI_A_UART_OVERSAMPLING_BAUDRATE_GENERATION // Oversampling
////            };
////
////    //set the GPIO ports to UART
////    MAP_GPIO_setAsPeripheralModuleFunctionInputPin(
////            GPIO_PORT_P1,
////            GPIO_PIN1 | GPIO_PIN2 | GPIO_PIN3,
////            GPIO_PRIMARY_MODULE_FUNCTION);
////
////    /* Configuring and enabling UART Module */
////    MAP_UART_initModule(EUSCI_A0_BASE, &uartConfig);
////
////    //enable interrupts for both receive and transmit
////    MAP_UART_enableModule(EUSCI_A0_BASE);
////
////    //EUSCI_A_UART_RECEIVE_INTERRUPT | EUSCI_A_UART_TRANSMIT_INTERRUPT
////    //     MAP_UART_enableInterrupt(EUSCI_A0_BASE, EUSCI_A_UART_RECEIVE_INTERRUPT);
////    //Interrupt on both the receive and transmit interrupt
////    MAP_UART_enableInterrupt(
////            EUSCI_A0_BASE,
////            EUSCI_A_UART_RECEIVE_INTERRUPT | EUSCI_A_UART_TRANSMIT_INTERRUPT);
////
////    //setup interrupts on NVIC.  Without it, UART interrupt does nothing.
////    Interrupt_disableMaster();
////
////    //Enable interrupt and set priority
////    Interrupt_enableInterrupt( INT_EUSCIA0);
////    Interrupt_setPriority( INT_EUSCIA0, 2);
//
//    //     Interrupt_enableInterrupt( INT_EUSCIA1 );
//    //     Interrupt_setPriority ( INT_EUSCIA1,1);
//
////    Interrupt_enableMaster();
////
//    MAP_GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN0);
//    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
//    MAP_GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN1);
//    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
//
//    MAP_Timer_A_configureUpMode(TIMER_A0_BASE, &upConfig_0);
//
//    MAP_Interrupt_enableInterrupt(INT_TA0_0);
//
//    MAP_Timer_A_startCounter(TIMER_A0_BASE, TIMER_A_UP_MODE);
//
////    MAP_Interrupt_enableMaster();
//
//    // Configure Switches
//    MAP_GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN1);
//    MAP_GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN4);
//
//    //if one switch is pressed, turn on the light, otherwise, turn it off
//    while (1)
//    {
//        if (GPIO_INPUT_PIN_LOW
//                == MAP_GPIO_getInputPinValue(GPIO_PORT_P1, GPIO_PIN1))
//        {
//            MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN0);
//        }
//        else
//        {
//            MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
//        }
//
//        //if the other switch is pressed, change the light color and turn on the light
//        if (GPIO_INPUT_PIN_LOW
//                == MAP_GPIO_getInputPinValue(GPIO_PORT_P1, GPIO_PIN4))
//        {
//            printf("button pressed\n");
//        }
//    }
//
////
////
////    char myString[] = { 'F', 'l', 'a', 's', 'h', ' ', 'E', 'x', 'a', 'm', 'p',
////                        'l', 'e', '\0' };
////
////    // Unprotecting Main Bank 1, Sector 31
////    //use sector 0 (memory space 0)
////    MAP_FlashCtl_unprotectSector(FLASH_MAIN_MEMORY_SPACE_BANK1, 0);
////
////    // Trying to erase the sector. Within this function, the API will automatically try to erase the    // maximum number of tries. If it fails, notify user.
////    if (!MAP_FlashCtl_eraseSector(0))
////    {
////        printf("Erase failed\r\n");
////    }
//////Trying to program the memory. Within this function, the API will automatically try to program the    //maximum number of tries. If it fails, notify user.
////    if (!MAP_FlashCtl_programMemory(myString, (void*) 0, 14))
////    {
////        printf("Write failed\r\n");
////    }
////    /* Setting the sector back to protected  */
////    MAP_FlashCtl_protectSector(FLASH_MAIN_MEMORY_SPACE_BANK1, 0);
////
////
//}
//
//void TA0_0_IRQHandler()
//{
//    Timer_A_clearCaptureCompareInterrupt(TIMER_A0_BASE,
//    TIMER_A_CAPTURECOMPARE_REGISTER_0);
//    while (ADC14_isBusy())
//    {
//    };
//    ADC14_toggleConversionTrigger();
//    uint16_t adc = ADC14_getResult(ADC_MEM0);
//    temp = (float) adc / 1023 * 150;
//    printf("%f\n", temp);
//}
//

//import the driver library and the prototype and define statements
#include "driverlib.h"
#include <stdio.h>

//create a global variable LEDcounter that is used to change the LED color
unsigned short LEDcounter = 0;

//mode 0 is read from adc
//mode 1 is write
uint8_t mode = 0;

//set the dco frequency to 3MHz
uint32_t dcoFreq = 3E+6;

//strangely, the period chosen seems to change the value
const int timer1_period = 46875; // 3E+6/64 = 46875 Hz --> read once every second if you count to this number

const float tempgain = .0162293; //(float)5/3/1000;

volatile float voltage;                                // Calculated temperature
volatile float temp;
int i = 0;

float floatarr[30] = { };

const Timer_A_UpModeConfig upConfig_0 =                     // Up Mode
        { TIMER_A_CLOCKSOURCE_SMCLK,                // Timer A is based on SMCLK
          TIMER_A_CLOCKSOURCE_DIVIDER_64, // Slow down the counter 64 times over
          timer1_period,                 // Period of Timer A, stored in TAxCCR0
          TIMER_A_TAIE_INTERRUPT_DISABLE, // Disable interrupts when Timer A rolls over
          TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE, // Enable interrupt for capture-compare
          TIMER_A_DO_CLEAR                   // Clears counter when initialized
        };

int main(void)
{
    //Taken from template:

    // Halt watchdog timer
    MAP_WDT_A_holdTimer();

    //enable floating point module
    MAP_FPU_enableModule();

    // Set DCO clock source frequency
    CS_setDCOFrequency(dcoFreq);
    // Set Submaster Clock to be 1-1 with DCO.  The larger the divider, the slower the clock signal will be
    CS_initClockSignal(CS_SMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1);

    //Set pin to read ADC
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P5, GPIO_PIN5,
    GPIO_TERTIARY_MODULE_FUNCTION);

    //enable ADC
    ADC14_enableModule();

    //set ADC Resolution to 10 bit
    ADC14_setResolution(ADC_10BIT);

    //this is using the masterclock to sample the ADC module (so it's running at 3MHz)
    ADC14_initModule(ADC_CLOCKSOURCE_MCLK, ADC_PREDIVIDER_1, ADC_DIVIDER_1,
    ADC_NOROUTE);

    ADC14_configureSingleSampleMode(ADC_MEM0, false);

    MAP_REF_A_setReferenceVoltage(REF_A_VREF2_5V);
    MAP_REF_A_enableReferenceVoltage();

    //conversion memory to intbuf
    ADC14_configureConversionMemory(ADC_MEM0, ADC_VREFPOS_INTBUF_VREFNEG_VSS,
    ADC_INPUT_A0,
                                    ADC_NONDIFFERENTIAL_INPUTS);

    ADC14_enableSampleTimer(ADC_MANUAL_ITERATION);

    //Enable the ADC
    ADC14_enableConversion();

    Interrupt_disableMaster();
    //interrupt not when the ADC is complete, but when 1 second has passed and timer A is finished
    Timer_A_clearInterruptFlag(TIMER_A0_BASE);
    //Enable and configure the interrupt for up mode
    Timer_A_enableInterrupt(TIMER_A0_BASE);
    Timer_A_configureUpMode(TIMER_A0_BASE, &upConfig_0);
    Interrupt_enableInterrupt(INT_TA0_0);

    //wasn't in the notes.  Starts the counter.  Counts in up mode to the equivalent time for 1 second
    Timer_A_startCounter(TIMER_A0_BASE, TIMER_A_UP_MODE);
    Interrupt_enableMaster();

    // Configure Red LED
    MAP_GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN0);
    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);

    //Configure the 3 color LED
    MAP_GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN0);
    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);

    MAP_GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN1);
    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);

    MAP_GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN2);
    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);

    // Configure Switches
    MAP_GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN1);
    MAP_GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN4);

    //use pressed variable to stop the program from making all 3 colors cycle too quickly for the human eye

    //default mode is 0, so turn on the proper light
    MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN0);
    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);

    while (1)
    {
        //if one switch is pressed, turn on one light, turn the other off, and set mode to data acquisition
        if (GPIO_INPUT_PIN_LOW
                == MAP_GPIO_getInputPinValue(GPIO_PORT_P1, GPIO_PIN1))
        {
            MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN0);
            MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
            mode = 0;
        }

        //if the other switch is pressed, reverse the lights and set the mode to write
        if (GPIO_INPUT_PIN_LOW
                == MAP_GPIO_getInputPinValue(GPIO_PORT_P1, GPIO_PIN4) && mode!=1)
        {
            MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
            MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
            mode = 1;

        }

        if (mode == 1)
        {
            //note that this gets pressed multiple times every single press.
            mode = 0;
            Interrupt_disableMaster();
            printf("the output mode has been triggered\n");

            Interrupt_enableMaster();

        }

    }

}

//note that if this isn't specified, it goes to the default null interrrupt and goes into an infinite while loop every interrupt
void TA0_0_IRQHandler()
{
    Timer_A_clearCaptureCompareInterrupt(TIMER_A0_BASE,
    TIMER_A_CAPTURECOMPARE_REGISTER_0);
    while (ADC14_isBusy())
    {
    };
    ADC14_toggleConversionTrigger();
    uint16_t adc = ADC14_getResult(ADC_MEM0);
    temp = (float) adc / 1023 * 150;
    printf("%f\n", temp);

    if (i < 30)
    {
        floatarr[i] = temp;
        i++;
    }
    else
    {
        //you have collected 30 datapoints and need to write them to memory
        mode=1;
    }

}


void write2Memory()
{

}
