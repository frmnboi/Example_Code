#include <stdio.h>

//import the driver library
#include "driverlib.h"

void UART_Send_Receive();

uint32_t ind=0;
const int baudrate=38400;
volatile char charbuffer[200]="";

char letter='b';

void main(void)
{
    // Halt watchdog timer
    MAP_WDT_A_holdTimer();

    unsigned int dcoFrequency = 3E+6;
     MAP_CS_setDCOFrequency(dcoFrequency);
     MAP_CS_initClockSignal(CS_SMCLK,CS_DCOCLK_SELECT,CS_CLOCK_DIVIDER_1);


     const eUSCI_UART_Config uartConfig =
     {
     EUSCI_A_UART_CLOCKSOURCE_SMCLK, // SMCLK Clock Source
     4, // Calculated using 3MHz and 38400bps
     14,
     0,
     EUSCI_A_UART_NO_PARITY, // No Parity
     EUSCI_A_UART_LSB_FIRST, // LSB First
     EUSCI_A_UART_ONE_STOP_BIT, // One stop bit
     EUSCI_A_UART_MODE, // UART mode
     EUSCI_A_UART_OVERSAMPLING_BAUDRATE_GENERATION // Oversampling
     };

     MAP_GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P1,
                        GPIO_PIN1 | GPIO_PIN2 | GPIO_PIN3, GPIO_PRIMARY_MODULE_FUNCTION);

     /* Configuring and enabling UART Module */
     MAP_UART_initModule(EUSCI_A0_BASE, &uartConfig);

     //enable interrupts for both receive and transmit
     MAP_UART_enableModule(EUSCI_A0_BASE);

     //clear flag to stop the interrupt for starting without a call
     UART_clearInterruptFlag ( EUSCI_A0_BASE, 0x3 );

     //no need to configure priority since it is the only interrupt
     //EUSCI_A_UART_RECEIVE_INTERRUPT | EUSCI_A_UART_TRANSMIT_INTERRUPT
     MAP_UART_enableInterrupt(EUSCI_A0_BASE, EUSCI_A_UART_RECEIVE_INTERRUPT);

     //for the transmit interrupt
     MAP_UART_initModule(EUSCI_A1_BASE, &uartConfig);
     MAP_UART_enableModule(EUSCI_A1_BASE);
     UART_clearInterruptFlag (EUSCI_A1_BASE, 0xF );
     MAP_UART_enableInterrupt(EUSCI_A1_BASE, EUSCI_A_UART_TRANSMIT_INTERRUPT);

     //setup interrupts on NVIC.  Without it, UART interrupt does nothing.
     Interrupt_disableMaster();

     Interrupt_enableInterrupt( INT_EUSCIA0 );
     Interrupt_setPriority ( INT_EUSCIA0, 2 );

     Interrupt_enableInterrupt( INT_EUSCIA1 );
     Interrupt_setPriority ( INT_EUSCIA1,1);

     Interrupt_enableMaster();

     //UART is now configured

     printf("Start of Infinite Loop \n");

     UART_transmitData(EUSCI_A1_BASE, letter);
//     while(1){UART_transmitData(EUSCI_A0_BASE, letter);} //this triggers the interrupt every time it is called
     while(1){}
     //the UART interrupt will do the work

}

void UART_Receive()
{
    printf("Receive interrupt was called \n");
    uint8_t character=(uint8_t) UART_receiveData (EUSCI_A0_BASE);
    printf("%c \n",(char)character);
    charbuffer[ind]=character;
    if (ind==200){
        ind=0;
    }
    else{
        ind++;
    }

    if (character==0x0D){
        printf("return was pressed just now \n");
//        UART_transmitData(EUSCI_A0_BASE, letter);
//        uint16_t i=0;
//        for (i=0;i<ind;i++){
//            UART_transmitData(EUSCI_A0_BASE, charbuffer[i]);
//            //may need its own interrupt to make sure the flag is cleared
//        }
//        ind=0;
    }


    //clear interrupt flag
    //0x2 clears the flag for write.  0x1 clears the flag for read.  But how could you know this was the one to clear?  I had to use 0xF at first to clear all
    UART_clearInterruptFlag ( EUSCI_A0_BASE, 0x1);
}

void UART_Send(){
    printf("Send interrupt was called \n");
    UART_clearInterruptFlag (EUSCI_A1_BASE, 0xF);
}

