//import the driver library and the prototype and define statements
#include "driverlib.h"
#include <stdio.h>

//issues:
//The mysterious hardware like error for the for loop and changing the variable value randomly
//the Uart1 doesn't work. try new cable.  Didn't work.
//it reads \377 after resetting the msp.  try unplugging and repulugging to see if the issue is when the debug probe flashes everything again.  IT WORKS!  also much faster without debug
//the send doesn't work properly if it has to send more than 25 symbols no matter what, and sends the /377 constantly.  try with new device  doesn't work.

//create a global variable LEDcounter that is used to change the LED color
unsigned short LEDcounter = 0;

//mode 0 is read from adc
//mode 1 is write
uint8_t modevar = 0;

//set the dco frequency to 3MHz
uint32_t dcoFreq = 3E+6;

//strangely, the period chosen seems to change the value
const int timer1_period = 46875; // 3E+6/64 = 46875 Hz --> read once every second if you count to this number

const float tempgain = .0162293; //(float)5/3/1000;

volatile float voltage;                                // Calculated temperature
volatile float temp;
int numtempvals = 0;
int i = 0;
int j = 0;
uint8_t len = 0;
short index = 0;

//I needed this because there is likely some hardware error with the microprocessor that keeps resetting the modevar variable to 1, but only after all 30 items have been picked.  Please ask about this.
bool completed = false;

float floatarr[30] = { };
char asciiarr[181] = { };
char temparr[4] = { };

const Timer_A_UpModeConfig upConfig_0 =                     // Up Mode
        { TIMER_A_CLOCKSOURCE_SMCLK,                // Timer A is based on SMCLK
          TIMER_A_CLOCKSOURCE_DIVIDER_64, // Slow down the counter 64 times over
          timer1_period,                 // Period of Timer A, stored in TAxCCR0
          TIMER_A_TAIE_INTERRUPT_DISABLE, // Disable interrupts when Timer A rolls over
          TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE, // Enable interrupt for capture-compare
          TIMER_A_DO_CLEAR                   // Clears counter when initialized
        };

#define MAIN_1_SECTOR_31 0x0003F000   // Address of Main Memory, Bank 1, Sector 31

//function prototypes
static void readMemory();
static void write2Memory();

int main(void)
{
    //Taken from template:

    // Halt watchdog timer
    MAP_WDT_A_holdTimer();

    //enable floating point module
    MAP_FPU_enableModule();

    // Set DCO clock source frequency
    CS_setDCOFrequency(dcoFreq);
    // Set Submaster Clock to be 1-1 with DCO.  The larger the divider, the slower the clock signal will be
    CS_initClockSignal(CS_SMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1);

    //Set pin to read ADC
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P5, GPIO_PIN5,
    GPIO_TERTIARY_MODULE_FUNCTION);

    //enable ADC
    ADC14_enableModule();

    //set ADC Resolution to 10 bit
    ADC14_setResolution(ADC_10BIT);

    //this is using the masterclock to sample the ADC module (so it's running at 3MHz)
    ADC14_initModule(ADC_CLOCKSOURCE_MCLK, ADC_PREDIVIDER_1, ADC_DIVIDER_1,
    ADC_NOROUTE);

    ADC14_configureSingleSampleMode(ADC_MEM0, false);

    MAP_REF_A_setReferenceVoltage(REF_A_VREF2_5V);
    MAP_REF_A_enableReferenceVoltage();

    //conversion memory to intbuf
    ADC14_configureConversionMemory(ADC_MEM0, ADC_VREFPOS_INTBUF_VREFNEG_VSS,
    ADC_INPUT_A0,
                                    ADC_NONDIFFERENTIAL_INPUTS);

    ADC14_enableSampleTimer(ADC_MANUAL_ITERATION);

    //Enable the ADC
    ADC14_enableConversion();

    Interrupt_disableMaster();
    //interrupt not when the ADC is complete, but when 1 second has passed and timer A is finished
    Timer_A_clearInterruptFlag(TIMER_A0_BASE);
    //Enable and configure the interrupt for up mode
    Timer_A_enableInterrupt(TIMER_A0_BASE);
    Timer_A_configureUpMode(TIMER_A0_BASE, &upConfig_0);
    Interrupt_enableInterrupt(INT_TA0_0);

    //wasn't in the notes.  Starts the counter.  Counts in up mode to the equivalent time for 1 second
    Timer_A_startCounter(TIMER_A0_BASE, TIMER_A_UP_MODE);
    Interrupt_enableMaster();

    // Configure Red LED
    MAP_GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN0);
    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);

    //Configure the 3 color LED
    MAP_GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN0);
    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);

    MAP_GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN1);
    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);

    MAP_GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN2);
    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN2);

    // Configure Switches
    MAP_GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN1);
    MAP_GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN4);

    //use pressed variable to stop the program from making all 3 colors cycle too quickly for the human eye

    //default mode is 0, so turn on the proper light
    MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN0);
    MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);

//    //UART configuration for 38400 baud rate
//        //note that SMCLK is the same as MCLK here and is 3MHz
//        const eUSCI_UART_Config uartConfig = {
//        EUSCI_A_UART_CLOCKSOURCE_SMCLK, // SMCLK Clock Source
//                4, // Calculated using 3MHz and 38400bps
//                14,
//                0,
//                EUSCI_A_UART_NO_PARITY, // No Parity
//                EUSCI_A_UART_LSB_FIRST, // LSB First
//                EUSCI_A_UART_ONE_STOP_BIT, // One stop bit
//                EUSCI_A_UART_MODE, // UART mode
//                EUSCI_A_UART_OVERSAMPLING_BAUDRATE_GENERATION // Oversampling
//                };

    //UART configuration for 9600 baud rate
    //note that SMCLK is the same as MCLK here and is 3MHz
    const eUSCI_UART_Config uartConfig = {
    EUSCI_A_UART_CLOCKSOURCE_SMCLK, // SMCLK Clock Source
            19, // Calculated using 3MHz and 38400bps
            8, 0,
            EUSCI_A_UART_NO_PARITY, // No Parity
            EUSCI_A_UART_LSB_FIRST, // LSB First
            EUSCI_A_UART_ONE_STOP_BIT, // One stop bit
            EUSCI_A_UART_MODE, // UART mode
            EUSCI_A_UART_OVERSAMPLING_BAUDRATE_GENERATION // Oversampling
            };

    //set the GPIO ports to UART
    MAP_GPIO_setAsPeripheralModuleFunctionInputPin(
            GPIO_PORT_P1,
            GPIO_PIN1 | GPIO_PIN2 | GPIO_PIN3,
            GPIO_PRIMARY_MODULE_FUNCTION);

    //notably, using the A1_BASE that should also work for UART does absolutely nothing.  this is carried over from the uart lab.  Why? ***************************************************
    /* Configuring and enabling UART Module */
    MAP_UART_initModule(EUSCI_A0_BASE, &uartConfig);

    //enable interrupts for both receive and transmit
    MAP_UART_enableModule(EUSCI_A0_BASE);

    while (1)
    {
//        Interrupt_disableMaster();
        //if one switch is pressed, turn on one light, turn the other off, and set mode to data acquisition
        if (GPIO_INPUT_PIN_LOW
                == MAP_GPIO_getInputPinValue(GPIO_PORT_P1, GPIO_PIN1)
                && modevar != 0)
        {
            //small red LED
            MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P1, GPIO_PIN0);
            MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN1);
            MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);
            modevar = 0;
            printf("Input mode triggered\n");
        }

        //if the other switch is pressed, reverse the lights and set the mode to write
        if (GPIO_INPUT_PIN_LOW
                == MAP_GPIO_getInputPinValue(GPIO_PORT_P1, GPIO_PIN4)
                && modevar != 2)
        {
            //yellow light
            MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
            MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
            MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0);
            modevar = 2;

        }

        //Completed data collection
        if (modevar == 1) // && !completed
        {
            //green LED
            MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
            MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
            MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);

            write2Memory();

            //set it to a nonexistant mode so the buttons will work again
            modevar = 7;
            //I had to put this in because the system keeps resetting modevar to 1 in the first if statement, but only after it has collected 30 datapoints.  It is entirely inexplicable**************************************************************************
            //this needs to be resolved properly, because as far as I can tell, the digital press of the read pin sometimes resets the mode to 1 and causes it to write, leaving a stage of 1-2 values and the rest zeros.
            //it seems that the timer A interrupt is still running.  Notably, it seems to keep resetting the mode to 1, which it should only be able to do once after completion
            //it seems that the counter variable is not being reset properly.  I tried changing it from i to numtempvals, but it still persists.
            //the interrupt disable revealed that it is some interrupt that is doing this, and timer A seems like the only one that resets the modevar
            //it seems to have dissapeared after I tried putting in that print statement at the bottom to print out modevar
            //originally, it was changing modevar to 1 constantly on the first GPIO read or when the interrupt was enabled.  However it suddently stopped after I was messing around with setting the modevar every iteration and printing the modevar.  deleting the print and then the disables still works.  doesn't make sense.  Hardware error?
            //also the if statement where the interrupt only runs when mode==0 was not there
            completed = true;

        }

        //Output mode
        if (modevar == 2)
        {

            Interrupt_disableMaster();
            printf("the output mode has been triggered\n");

            readMemory();

            Interrupt_enableMaster();

            //yellow light after send
            MAP_GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
            MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN1);
            MAP_GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN0);

            //set it to a nonexistant mode so the buttons will work again
            modevar = 7;
        }
//        printf("modevar: %d\n",modevar);
//        Interrupt_enableMaster();

    }

}

//note that if this isn't specified, it goes to the default null interrrupt and goes into an infinite while loop every interrupt
void TA0_0_IRQHandler()
{
    Timer_A_clearCaptureCompareInterrupt(TIMER_A0_BASE,
    TIMER_A_CAPTURECOMPARE_REGISTER_0);

    if (modevar == 0)
    {
        while (ADC14_isBusy())
        {
        };
        ADC14_toggleConversionTrigger();
        uint16_t adc = ADC14_getResult(ADC_MEM0);
        temp = (float) adc / 1023 * 150;
        printf("%.1f\n", temp);

        if (numtempvals < 30)
        {
//        modevar=0;
            floatarr[numtempvals] = temp;
            numtempvals++;
        }
        else
        {
            //you have collected 30 datapoints and need to write them to memory
            modevar = 1;
            numtempvals = 0;
        }
    }

}

static void write2Memory()
{
    // Unprotecting Main Bank 1, Sector 31
    MAP_FlashCtl_unprotectSector(FLASH_MAIN_MEMORY_SPACE_BANK1, FLASH_SECTOR31);

    //you have to erase the sector before using it
    // Trying to erase the sector. Within this function, the API will automatically try to erase the    // maximum number of tries. If it fails, notify user.
    if (!MAP_FlashCtl_eraseSector(MAIN_1_SECTOR_31))
    {
        printf("Erase failed\r\n");
    }

    //Trying to program the memory. Within this function, the API will automatically try to program the    //maximum number of tries. If it fails, notify user.

    //note that floatarr, the array of floats does nothing and saves nothing to memory.

//    int n=0;
//    n=sprintf(asciiarr,"%.1f\0",floatarr[0]);
//    printf("%d characters were written to asciarr\n",n);
//    printf("This was what was in asciiarr: [%s]\n",asciiarr);
//    printf("the size of asciiarr is: %d", sizeof(asciiarr)/sizeof(asciiarr[0]));

//    for (i = 0; i < 30; i++)
//    {
//        len=(uint8_t) sprintf(temparr, "%.1f\r\n", floatarr[i]);
//
//        for (j = 0; j < len; j++)
//        {
//            asciiarr[index + j] = temparr[j];
//        }
//        index+=len;
//    }

//    for (i = 0; i < 30; i++)
//    {
//        sprintf(temparr, "%.1f\n", floatarr[i]);
////        printf("iteration: %d\n", i);
////        printf("This was what was in temparr: [%s]\n", temparr);
////        printf("This was what was in asciiarr: [%s]\n", asciiarr);
//        //5 characters long dd.d\n and ends with \0
//        for (j = 0; j < 4; j++)
//        {
//            asciiarr[i * 6 + j] = temparr[j];
//        }
//        asciiarr[i * 6 + 4] = '\r';        //(uint8_t) 10;//'\n';
//        asciiarr[i * 6 + 5] = '\n';        //(uint8_t) 10;//'\n';
//    }
//    asciiarr[181] = '\0';

    //this doesn't work either.  the UART delay is too long, the  for loop never ends.  What on earth is going on? *************************************************************************
    //and now suddenly this is working too after that weird error from before went away
    //it was counting up by sixes and not ones like it should be, but consistently.
    //    printf("printing ascii array that will be written: \n");
//    for (i = 0; i < 181; i++)
//    {
//        printf("%c", asciiarr[i]);
//        printf("%d", i);
////        for (j=0;j<100000;j++){}
//    }

//    printf("This was what was in asciiarr: [%s]\n", asciiarr);

    if (!MAP_FlashCtl_programMemory(floatarr, (void*) MAIN_1_SECTOR_31, 151))
    {
        printf("Write failed\r\n");
    }
    else
    {
        printf("Write success\r\n");

    }
    /* Setting the sector back to protected  */
    MAP_FlashCtl_protectSector(FLASH_MAIN_MEMORY_SPACE_BANK1, FLASH_SECTOR31);
}

static void readMemory()
{
    // Assume data is already in Main memory, Bank 1, Sector 31 from running program last time
//    char *string_from_flash = (char*) MAIN_1_SECTOR_31;
    float *floats_from_flash = (float*) MAIN_1_SECTOR_31;

//    printf("printing the string from flash\n");
//    // Print string out
//    printf("%s\r\n\0", string_from_flash);

    //while it is not a null character
    while (*floats_from_flash)
    {
        len = (uint8_t) sprintf(temparr, "%.1f\r\n", floats_from_flash[i]);
        for (j = 0; j < len; j++)
        {
            UART_transmitData(EUSCI_A0_BASE, temparr[j]);
            printf("%c", temparr[j]);
        }
        *floats_from_flash++;
    }

//    for (i = 0; i < sizeof(floats_from_flash) / sizeof(float); i++)
//    {
//        len = (uint8_t) sprintf(temparr, "%.1f\r\n", floats_from_flash[i]);
//        for (j = 0; j < len; j++)
//        {
//            UART_transmitData(EUSCI_A0_BASE, temparr[j]);
//            printf("%c", temparr[j]);
//        }
//    }

    //25 seems to be the limit
    //baud rate seems to do nothing.
    //as it approaches 30, the yyyyy actualy doubles

    //index is the number of elements cumulatively that need to be transmitted
//    printf("%d elements to print", index);
//    for (i = 0; i < index; i++)
//    {
//        UART_transmitData(EUSCI_A0_BASE, string_from_flash[i]);
//        printf("%c", string_from_flash[i]);
//    }
//    index = 0;

//    for (i = 0; i < 30; i++)
//    {
//        //i is not printing concurrently
////        if (i == 5)
////        {
////            printf("asdf\n");
////        }
//        for (j = 0; j < 6; j++)
//        {
//            //according to the expression extension, this is correct always, yet it consistently fails at this point.  Why?*************************************************
//            //the data expression says the data is fine and uncorrupted
//            //pulling from memory directly before the green light, everything is corrupted except the first few.
//            UART_transmitData(EUSCI_A0_BASE, string_from_flash[i * 6 + j]);
//            printf("%c", string_from_flash[i * 6 + j]);
//        }
////        printf("%c", string_from_flash[i]);
//    }

}
